{"ast":null,"code":"import _classCallCheck from \"/Users/masha/Desktop/kanban/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/masha/Desktop/kanban/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/masha/Desktop/kanban/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/masha/Desktop/kanban/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/masha/Desktop/kanban/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/masha/Desktop/kanban/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/masha/Desktop/kanban/src/components/List.js\";\nimport React, { Component } from 'react';\nimport Card from './Card';\n\nvar List =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(List, _Component);\n\n  function List() {\n    var _this;\n\n    _classCallCheck(this, List);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(List).call(this));\n\n    _this.deleteCardHandler = function (cardID) {\n      var card = _this.props.cards.indexOf(cardID);\n\n      card.splice(cardID, 1);\n      console.log(card);\n    };\n\n    _this.state = {\n      inputValue: \"\",\n      submitted: false\n    };\n    _this.updateInputValue = _this.updateInputValue.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addNewTaskHandler = _this.addNewTaskHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(List, [{\n    key: \"updateInputValue\",\n    value: function updateInputValue(e) {\n      var updatedValue = e.target.value;\n      this.setState({\n        inputValue: updatedValue,\n        submitted: true\n      }); // e.target.value = '';\n\n      console.log(this.state.inputValue); // let updatedValue = e.target.value;\n      // this.setState({inputValue: updatedValue, submitted: true});\n      // console.log(updatedValue);\n    }\n  }, {\n    key: \"addNewTaskHandler\",\n    value: function addNewTaskHandler(e) {\n      var inputValue = this.state.inputValue.value;\n      var submitted = this.state.submitted;\n\n      if (inputValue !== \"\" && submitted === true) {\n        return React.createElement(\"div\", {\n          className: \"Card\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }, inputValue); // return new card with title\n      } else return null; // <Card {taskTitle} />\n\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var cards = this.props.cards.map(function (card) {\n        return React.createElement(Card, Object.assign({}, card, {\n          key: card.id,\n          deleteCard: function deleteCard() {\n            return _this2.deleteCardHandler(card.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        })) // <Card id={card.id} \n        //     key={card.id}\n        //     cardTitle={card.cardTitle}\n        //     description={card.description}\n        //     status={card.status}\n        //     level={card.level}\n        //     tasks={card.taskTitle} /> \n        ;\n      }); // const update = ((e) => this.updateInputValue(e));\n      // let newCardTitle = '';\n      // if( this.state.submitted ) {\n      //     newCardTitle.append(this.state.inputValue);\n      //     console.log(newCardTitle);\n      // }\n      // function for task title container -> paste task into card with addNewTaskHandler()\n\n      return React.createElement(\"div\", {\n        className: \"List\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"List__title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, this.props.title), cards, React.createElement(\"form\", {\n        className: \"List__form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.inputValue,\n        placeholder: \"Enter new task\",\n        onChange: this.updateInputValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"+\")));\n    }\n  }]);\n\n  return List;\n}(Component);\n\nexport { List as default };","map":{"version":3,"sources":["/Users/masha/Desktop/kanban/src/components/List.js"],"names":["React","Component","Card","List","deleteCardHandler","cardID","card","props","cards","indexOf","splice","console","log","state","inputValue","submitted","updateInputValue","bind","addNewTaskHandler","e","updatedValue","target","value","setState","map","id","title"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Card from './Card';\n\nexport default class List extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            inputValue: \"\",\n            submitted: false,\n        };\n\n        this.updateInputValue = this.updateInputValue.bind(this);\n        this.addNewTaskHandler = this.addNewTaskHandler.bind(this);\n    }\n\n    updateInputValue(e) {\n            let updatedValue = e.target.value;\n            this.setState({inputValue: updatedValue, submitted: true});\n            // e.target.value = '';\n            console.log(this.state.inputValue);\n        // let updatedValue = e.target.value;\n        // this.setState({inputValue: updatedValue, submitted: true});\n        // console.log(updatedValue);\n    }\n\n    addNewTaskHandler(e)  {\n        let inputValue = this.state.inputValue.value;\n        let submitted = this.state.submitted;\n\n        if( inputValue !== \"\" && submitted === true ) {\n            return (\n                <div className=\"Card\">\n                    {inputValue}\n                </div>\n            )\n            // return new card with title\n        } else return null;\n        // <Card {taskTitle} />\n    }\n\n    deleteCardHandler = (cardID) => {\n        let card = this.props.cards.indexOf(cardID);\n        card.splice(cardID, 1);\n        console.log(card); \n    }\n\n    render() {\n        let cards = this.props.cards.map((card) => {\n            return ( <Card  {...card} key={card.id} deleteCard={() => this.deleteCardHandler(card.id)}/>\n                // <Card id={card.id} \n                //     key={card.id}\n                //     cardTitle={card.cardTitle}\n                //     description={card.description}\n                //     status={card.status}\n                //     level={card.level}\n                //     tasks={card.taskTitle} /> \n            )\n        });\n\n        // const update = ((e) => this.updateInputValue(e));\n\n        // let newCardTitle = '';\n        // if( this.state.submitted ) {\n        //     newCardTitle.append(this.state.inputValue);\n        //     console.log(newCardTitle);\n        // }\n\n        // function for task title container -> paste task into card with addNewTaskHandler()\n\n        return(\n            <div className=\"List\">\n                <h1 className=\"List__title\">{this.props.title}</h1>\n                {cards}\n                {/* <h1>{newCardTitle}</h1> */}\n                <form className=\"List__form\">\n                    <input \n                        type=\"text\" \n                        value={this.state.inputValue}\n                        placeholder=\"Enter new task\"\n                        onChange={this.updateInputValue} />\n                    <button type=\"submit\" className=\"btn\">+</button>\n                </form>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}